Archive member included because of file (symbol)

c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/avr4\libgcc.a(_copy_data.o)
                              irman.o (__do_copy_data)
c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/avr4\libgcc.a(_clear_bss.o)
                              irman.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

IRC0_THRESHOLD      0x2               ircomm.o
cliff0_val          0x2               ircomm.o
cliff1_val          0x2               ircomm.o
PORTZ               0x1               cb4.o
cliff0_data         0x4               ircomm.o
PORTI               0x8               cb3.o
IRC1_THRESHOLD      0x2               ircomm.o
CB2STATE            0x1               cb4.o
cliff1_data         0x4               ircomm.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/../../../../avr/lib/avr4/crtm48.o
LOAD irman.o
LOAD motor.o
LOAD cb4.o
LOAD ircomm.o
LOAD uart0.o
LOAD i2c.o
LOAD cb3.o
LOAD c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/avr4\libgcc.a
LOAD c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/../../../../avr/lib/avr4\libc.a
LOAD c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/avr4\libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0xbc0
 *(.vectors)
 .vectors       0x00000000       0x34 c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/../../../../avr/lib/avr4/crtm48.o
                0x00000000                __vectors
                0x00000000                __vector_default
                0x00000034                __ctors_start = .
 *(.ctors)
                0x00000034                __ctors_end = .
                0x00000034                __dtors_start = .
 *(.dtors)
                0x00000034                __dtors_end = .
 *(.progmem.gcc*)
 .progmem.gcc_sw_table
                0x00000034       0x20 uart0.o
 *(.progmem*)
                0x00000054                . = ALIGN (0x2)
 *(.init0)
 *(.init1)
 *(.init2)
 .init2         0x00000054        0xc c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/../../../../avr/lib/avr4/crtm48.o
 *(.init3)
 *(.init4)
 .init4         0x00000060       0x16 c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/avr4\libgcc.a(_copy_data.o)
                0x00000060                __do_copy_data
 .init4         0x00000076       0x10 c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/avr4\libgcc.a(_clear_bss.o)
                0x00000076                __do_clear_bss
 *(.init5)
 *(.init6)
 *(.init7)
 *(.init8)
 *(.init9)
 .init9         0x00000086        0x2 c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/../../../../avr/lib/avr4/crtm48.o
 *(.text)
 .text          0x00000088        0x2 c:/tinyos/WinAVR/bin/../lib/gcc/avr/3.4.1/../../../../avr/lib/avr4/crtm48.o
                0x00000088                __vector_22
                0x00000088                __vector_1
                0x00000088                __vector_12
                0x00000088                __bad_interrupt
                0x00000088                __vector_6
                0x00000088                __vector_3
                0x00000088                __vector_23
                0x00000088                __vector_25
                0x00000088                __vector_11
                0x00000088                __vector_13
                0x00000088                __vector_17
                0x00000088                __vector_19
                0x00000088                __vector_5
                0x00000088                __vector_4
                0x00000088                __vector_9
                0x00000088                __vector_2
                0x00000088                __vector_21
                0x00000088                __vector_15
                0x00000088                __vector_8
                0x00000088                __vector_14
                0x00000088                __vector_10
                0x00000088                __vector_16
                0x00000088                __vector_18
                0x00000088                __vector_20
 .text          0x0000008a       0xb2 irman.o
                0x0000008a                init_mcu
                0x000000ca                main
                0x000000a2                stall
                0x000000c0                stk_ledon
 .text          0x0000013c      0x150 motor.o
                0x0000013c                init_motor
                0x00000152                move
                0x00000268                motor_parse
 .text          0x0000028c       0x96 cb4.o
                0x000002aa                update_CB2_1B
                0x0000029c                reset_CB4
                0x000002d4                load_CB4
                0x0000028c                init_CB4
 .text          0x00000322      0x450 ircomm.o
                0x00000356                enable_output_irclock
                0x000003d6                air_enqueue
                0x00000338                start_irclock
                0x000003c2                air_sample
                0x00000390                air_led_off
                0x0000038a                air_led_medium
                0x00000392                air_init
                0x0000034a                stop_irclock
                0x000006de                __vector_7
                0x00000330                debug_pb
                0x00000388                air_led_low
                0x000004c0                air_read_channel
                0x00000322                init_array
                0x0000035e                init_irclock
                0x0000034e                disable_output_irclock
                0x0000038e                air_led_fire
                0x00000480                air_dequeue
                0x00000336                reset_irclock
                0x0000038c                air_led_high
 .text          0x00000772      0x35e uart0.o
                0x0000079c                send_byte_serial
                0x00000772                init_serial
                0x00000aa0                UART_send_HEX16
                0x000007c8                UART_send_HEX4
                0x00000792                USRT_send_2bytes
                0x00000a78                UART_send_HEX16b
                0x00000a64                UART_send_HEX8
 .text          0x00000ad0       0xa2 i2c.o
                0x00000ae6                __vector_24
                0x00000ad0                init_I2C_slave
 .text          0x00000b72       0x4e cb3.o
                0x00000b8c                read_CB3_1B
                0x00000b72                init_CB3
                0x00000ba4                read_CB3
                0x00000bc0                . = ALIGN (0x2)
 *(.text.*)
                0x00000bc0                . = ALIGN (0x2)
 *(.fini9)
 *(.fini8)
 *(.fini7)
 *(.fini6)
 *(.fini5)
 *(.fini4)
 *(.fini3)
 *(.fini2)
 *(.fini1)
 *(.fini0)
                0x00000bc0                _etext = .

.data           0x00800100       0x1e load address 0x00000bc0
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100       0x1d ircomm.o
 *(.gnu.linkonce.d*)
                0x0080011e                . = ALIGN (0x2)
 *fill*         0x0080011d        0x1 00
                0x0080011e                _edata = .
                0x0080011e                PROVIDE (__data_end, .)

.bss            0x0080011e       0x3a
                0x0080011e                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0080011e       0x1f ircomm.o
 .bss           0x0080013d        0x1 i2c.o
                0x0080013d                i2c_buffer
 *(COMMON)
 COMMON         0x0080013e        0x2 cb4.o
                                  0x0 (size before relaxing)
                0x0080013e                PORTZ
                0x0080013f                CB2STATE
 COMMON         0x00800140       0x10 ircomm.o
                                  0x0 (size before relaxing)
                0x00800140                IRC0_THRESHOLD
                0x00800142                cliff0_val
                0x00800144                cliff1_val
                0x00800146                cliff0_data
                0x0080014a                IRC1_THRESHOLD
                0x0080014c                cliff1_data
 COMMON         0x00800150        0x8 cb3.o
                                  0x0 (size before relaxing)
                0x00800150                PORTI
                0x00800158                PROVIDE (__bss_end, .)
                0x00000bc0                __data_load_start = LOADADDR (.data)
                0x00000bde                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800158        0x0
                0x00800158                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800158                PROVIDE (__noinit_end, .)
                0x00800158                _end = .
                0x00800158                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0 load address 0x00000bde
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.stab           0x00000000     0x25a4
 *(.stab)
 .stab          0x00000000      0x504 irman.o
 .stab          0x00000504      0x450 motor.o
                                0x4e0 (size before relaxing)
 .stab          0x00000954      0x408 cb4.o
                                0x498 (size before relaxing)
 .stab          0x00000d5c      0xb64 ircomm.o
                                0xc0c (size before relaxing)
 .stab          0x000018c0      0x7a4 uart0.o
                                0x834 (size before relaxing)
 .stab          0x00002064      0x258 i2c.o
                                0x2e8 (size before relaxing)
 .stab          0x000022bc      0x2e8 cb3.o
                                0x378 (size before relaxing)

.stabstr        0x00000000      0xc64
 *(.stabstr)
 .stabstr       0x00000000      0xc64 irman.o
                                  0x0 (size before relaxing)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(irman.elf elf32-avr)
