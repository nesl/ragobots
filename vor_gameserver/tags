!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5	//
DMAX	nrutil.h	11;"	d
DMIN	nrutil.h	15;"	d
DSQR	nrutil.h	8;"	d
EMSG_TYPE	tcp.h	/^}EMSG_TYPE;$/;"	t
FMAX	nrutil.h	19;"	d
FMIN	nrutil.h	23;"	d
FREE_ARG	nrutil.c	295;"	d	file:
FREE_ARG	nrutil.c	7;"	d	file:
FREE_FUNCTION	test_lob_scaat.c	9;"	d	file:
FREE_MATRIX_FUNCTION	jacobi.c	8;"	d	file:
FREE_MATRIX_FUNCTION	lob_scaat.c	18;"	d	file:
FREE_MATRIX_FUNCTION	lubksb.c	4;"	d	file:
FREE_MATRIX_FUNCTION	ludcmp.c	9;"	d	file:
FREE_MATRIX_FUNCTION	mat_ops.c	5;"	d	file:
FREE_MATRIX_FUNCTION	mat_ops.h	7;"	d
FREE_VECTOR_FUNCTION	jacobi.c	7;"	d	file:
FREE_VECTOR_FUNCTION	lob_scaat.c	17;"	d	file:
FREE_VECTOR_FUNCTION	lubksb.c	3;"	d	file:
FREE_VECTOR_FUNCTION	ludcmp.c	8;"	d	file:
FREE_VECTOR_FUNCTION	mat_ops.c	4;"	d	file:
FREE_VECTOR_FUNCTION	mat_ops.h	6;"	d
IMAX	nrutil.h	35;"	d
IMIN	nrutil.h	39;"	d
Id	tcp.h	/^	int8_t Id;$/;"	m
KalmanBuffer	kalman_data_structures.h	/^}KalmanBuffer;$/;"	t
KalmanBuffer_tag	kalman_data_structures.h	/^typedef struct KalmanBuffer_tag {$/;"	s
LIB	Makefile	/^LIB = -lm  $/;"	m
LMAX	nrutil.h	27;"	d
LMIN	nrutil.h	31;"	d
MATRIX	jacobi.c	10;"	d	file:
MATRIX	lob_scaat.c	20;"	d	file:
MATRIX	lubksb.c	6;"	d	file:
MATRIX	ludcmp.c	11;"	d	file:
MATRIX	mat_ops.c	7;"	d	file:
MATRIX	mat_ops.h	9;"	d
MAXDATASIZE	tcp.h	22;"	d
MAX_MOBILES	tcp.h	27;"	d
MOBILE_AGENT1	tcp.h	26;"	d
MY_NODE_ID	tcp.h	23;"	d
NRANSI	jacobi.c	106;"	d	file:
NRANSI	jacobi.c	2;"	d	file:
NRANSI	ludcmp.c	2;"	d	file:
NRANSI	ludcmp.c	65;"	d	file:
NRANSI	mat_inv.c	4;"	d	file:
NR_END	nrutil.c	294;"	d	file:
NR_END	nrutil.c	6;"	d	file:
OBJECTS	Makefile	/^OBJECTS = tcp.o jacobi.o lubksb.o lob_scaat.o ludcmp.o  mat_ops.o utils.o nrutil.o$/;"	m
P	kalman_data_structures.h	/^	double **P;$/;"	m	struct:SCAATState_tag
PI	lob_scaat.c	23;"	d	file:
ROTATE	jacobi.c	105;"	d	file:
ROTATE	jacobi.c	14;"	d	file:
SCAATState	kalman_data_structures.h	/^}SCAATState;$/;"	t
SCAATState_tag	kalman_data_structures.h	/^typedef struct SCAATState_tag {$/;"	s
SIGN	nrutil.h	42;"	d
SOURCES	Makefile	/^SOURCES	= tcp.c jacobi.c lubksb.c lob_scaat.c ludcmp.c mat_ops.c utils.c nrutil.c$/;"	m
SQR	nrutil.h	5;"	d
STATE_NUM	kalman_data_structures.h	5;"	d
STORAGE_TYPE	jacobi.c	6;"	d	file:
STORAGE_TYPE	lob_scaat.c	16;"	d	file:
STORAGE_TYPE	lubksb.c	2;"	d	file:
STORAGE_TYPE	ludcmp.c	7;"	d	file:
STORAGE_TYPE	mat_ops.c	3;"	d	file:
STORAGE_TYPE	mat_ops.h	5;"	d
STORAGE_TYPE	tcp.h	20;"	d
STORAGE_TYPE	test_lob_scaat.c	8;"	d	file:
TARGET_INFO	tcp.h	/^} TARGET_INFO;$/;"	t
TINY	ludcmp.c	4;"	d	file:
TINY	ludcmp.c	64;"	d	file:
TRANSMITTER_1	tcp.h	24;"	d
TRANSMITTER_2	tcp.h	25;"	d
VECTOR	jacobi.c	9;"	d	file:
VECTOR	lob_scaat.c	19;"	d	file:
VECTOR	lubksb.c	5;"	d	file:
VECTOR	ludcmp.c	10;"	d	file:
VECTOR	mat_ops.c	6;"	d	file:
VECTOR	mat_ops.h	8;"	d
VOR_MSG	tcp.h	/^}VOR_MSG ;$/;"	t
VOR_MSG_ABORT	tcp.h	/^   VOR_MSG_ABORT$/;"	e
VOR_MSG_END	tcp.h	/^   VOR_MSG_END,$/;"	e
VOR_MSG_IDLE	tcp.h	/^   VOR_MSG_IDLE=0,$/;"	e
VOR_MSG_REQ_PREDICTION	tcp.h	/^   VOR_MSG_REQ_PREDICTION,$/;"	e
VOR_MSG_RES_PREDICTION	tcp.h	/^   VOR_MSG_RES_PREDICTION, \/\/PREDICTION RESPONSE$/;"	e
VOR_MSG_START	tcp.h	/^   VOR_MSG_START,$/;"	e
_NR_UTILS_H_	nrutil.h	2;"	d
__KALMAN_DATA_STRUCTURES_H__	kalman_data_structures.h	2;"	d
__LOB_SCAAT_H__	lob_scaat.h	2;"	d
__MAT_OPS_H__	mat_ops.h	2;"	d
__RUN_KALMAN_H__	run_kalman.h	2;"	d
__TCP_H___	tcp.h	2;"	d
angle	tcp.h	/^	int angle;$/;"	m
angle	tcp.h	/^   int8_t angle;$/;"	m
check_msg_validity	tcp.c	/^int check_msg_validity(TARGET_INFO *info,VOR_MSG *msg)$/;"	f
clean_exit	tcp.c	/^void clean_exit()$/;"	f
convert_matrix	nrutil.c	/^float **convert_matrix(a,nrl,nrh,ncl,nch)$/;"	f
convert_matrix	nrutil.c	/^float **convert_matrix(float *a, long nrl, long nrh, long ncl, long nch)$/;"	f
convert_vec_diag	mat_ops.c	/^int	convert_vec_diag(STORAGE_TYPE **C, STORAGE_TYPE *d, int n)$/;"	f
create_target_info	tcp.c	/^TARGET_INFO * create_target_info(VOR_MSG *msg)$/;"	f
curr_x	tcp.h	/^	int8_t curr_x;$/;"	m
curr_y	tcp.h	/^	int8_t curr_y;$/;"	m
cvector	nrutil.c	/^unsigned char *cvector(long nl, long nh)$/;"	f
cvector	nrutil.c	/^unsigned char *cvector(nl,nh)$/;"	f
dmatrix	nrutil.c	/^double **dmatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
dmatrix	nrutil.c	/^double **dmatrix(nrl,nrh,ncl,nch)$/;"	f
dmatrix_alloc	utils.c	/^STORAGE_TYPE ** dmatrix_alloc(int rows,int cols)$/;"	f
dmaxarg1	nrutil.h	/^static double dmaxarg1,dmaxarg2;$/;"	v
dmaxarg2	nrutil.h	/^static double dmaxarg1,dmaxarg2;$/;"	v
dminarg1	nrutil.h	/^static double dminarg1,dminarg2;$/;"	v
dminarg2	nrutil.h	/^static double dminarg1,dminarg2;$/;"	v
dsqrarg	nrutil.h	/^static double dsqrarg;$/;"	v
dt	tcp.h	/^	long dt;$/;"	m
dvector	nrutil.c	/^double *dvector(long nl, long nh)$/;"	f
dvector	nrutil.c	/^double *dvector(nl,nh)$/;"	f
elapsed_time	tcp.h	/^   uint8_t elapsed_time; \/\/ in milli seconds$/;"	m
f3tensor	nrutil.c	/^float ***f3tensor(long nrl, long nrh, long ncl, long nch, long ndl, long ndh)$/;"	f
f3tensor	nrutil.c	/^float ***f3tensor(nrl,nrh,ncl,nch,ndl,ndh)$/;"	f
free_convert_matrix	nrutil.c	/^void free_convert_matrix(b,nrl,nrh,ncl,nch)$/;"	f
free_convert_matrix	nrutil.c	/^void free_convert_matrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_cvector	nrutil.c	/^void free_cvector(unsigned char *v, long nl, long nh)$/;"	f
free_cvector	nrutil.c	/^void free_cvector(v,nl,nh)$/;"	f
free_dmatrix	nrutil.c	/^void free_dmatrix(double **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_dmatrix	nrutil.c	/^void free_dmatrix(m,nrl,nrh,ncl,nch)$/;"	f
free_dmatrix_alloc	utils.c	/^void free_dmatrix_alloc(STORAGE_TYPE **ptr)$/;"	f
free_dvector	nrutil.c	/^void free_dvector(double *v, long nl, long nh)$/;"	f
free_dvector	nrutil.c	/^void free_dvector(v,nl,nh)$/;"	f
free_f3tensor	nrutil.c	/^void free_f3tensor(float ***t, long nrl, long nrh, long ncl, long nch,$/;"	f
free_f3tensor	nrutil.c	/^void free_f3tensor(t,nrl,nrh,ncl,nch,ndl,ndh)$/;"	f
free_imatrix	nrutil.c	/^void free_imatrix(int **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_imatrix	nrutil.c	/^void free_imatrix(m,nrl,nrh,ncl,nch)$/;"	f
free_ivector	nrutil.c	/^void free_ivector(int *v, long nl, long nh)$/;"	f
free_ivector	nrutil.c	/^void free_ivector(v,nl,nh)$/;"	f
free_kalman_buffers	tcp.c	/^int free_kalman_buffers(TARGET_INFO *info)$/;"	f
free_lvector	nrutil.c	/^void free_lvector(unsigned long *v, long nl, long nh)$/;"	f
free_lvector	nrutil.c	/^void free_lvector(v,nl,nh)$/;"	f
free_matrix	nrutil.c	/^void free_matrix(float **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_matrix	nrutil.c	/^void free_matrix(m,nrl,nrh,ncl,nch)$/;"	f
free_submatrix	nrutil.c	/^void free_submatrix(b,nrl,nrh,ncl,nch)$/;"	f
free_submatrix	nrutil.c	/^void free_submatrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_vector	nrutil.c	/^void free_vector(float *v, long nl, long nh)$/;"	f
free_vector	nrutil.c	/^void free_vector(v,nl,nh)$/;"	f
from_Id	tcp.h	/^   uint8_t from_Id;$/;"	m
g	jacobi.c	/^STORAGE_TYPE s,h,tau,g;$/;"	v
get_host_ip_addr	tcp.c	/^int get_host_ip_addr(unsigned long *ipAddr)$/;"	f
get_target_info	tcp.c	/^TARGET_INFO * get_target_info(VOR_MSG *msg)$/;"	f
h	jacobi.c	/^STORAGE_TYPE s,h,tau,g;$/;"	v
handle_msg_from_mobile	tcp.c	/^int handle_msg_from_mobile(VOR_MSG *msg)$/;"	f
handle_recv_buffer	tcp.c	/^int handle_recv_buffer(int sock_fd)$/;"	f
hdr_1	tcp.h	/^   uint8_t hdr_1;$/;"	m
hdr_2	tcp.h	/^   uint8_t hdr_2;$/;"	m
hdr_3	tcp.h	/^   uint8_t hdr_3;$/;"	m
hdr_4	tcp.h	/^   uint8_t hdr_4;$/;"	m
hdr_5	tcp.h	/^   uint8_t hdr_5;$/;"	m
imatrix	nrutil.c	/^int **imatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
imatrix	nrutil.c	/^int **imatrix(nrl,nrh,ncl,nch)$/;"	f
imaxarg1	nrutil.h	/^static int imaxarg1,imaxarg2;$/;"	v
imaxarg2	nrutil.h	/^static int imaxarg1,imaxarg2;$/;"	v
iminarg1	nrutil.h	/^static int iminarg1,iminarg2;$/;"	v
iminarg2	nrutil.h	/^static int iminarg1,iminarg2;$/;"	v
in	tcp.h	/^	SCAATState in;$/;"	m
init_server	tcp.c	/^void init_server()$/;"	f
init_x	tcp.h	/^	int8_t init_x;$/;"	m
init_y	tcp.h	/^	int8_t init_y;$/;"	m
inner_prod	mat_ops.c	/^int inner_prod(STORAGE_TYPE *c, STORAGE_TYPE *a, STORAGE_TYPE *b, int n)$/;"	f
int8_t	tcp.h	19;"	d
intialize_kalman_buffers	tcp.c	/^int intialize_kalman_buffers(TARGET_INFO *info )$/;"	f
inv	mat_inv.c	/^int inv(double **C, int n, double **A){$/;"	f
isnan	mat_ops.c	/^int isnan(STORAGE_TYPE a)$/;"	f
ivector	nrutil.c	/^int *ivector(long nl, long nh)$/;"	f
ivector	nrutil.c	/^int *ivector(nl,nh)$/;"	f
jacobi	jacobi.c	/^void jacobi(STORAGE_TYPE **a, int n, STORAGE_TYPE d[], STORAGE_TYPE **v, int *nrot)$/;"	f
latest_timestamp	kalman_data_structures.h	/^	double latest_timestamp;$/;"	m	struct:SCAATState_tag
lmaxarg1	nrutil.h	/^static long lmaxarg1,lmaxarg2;$/;"	v
lmaxarg2	nrutil.h	/^static long lmaxarg1,lmaxarg2;$/;"	v
lminarg1	nrutil.h	/^static long lminarg1,lminarg2;$/;"	v
lminarg2	nrutil.h	/^static long lminarg1,lminarg2;$/;"	v
lob_scaat	lob_scaat.c	/^int lob_scaat(SCAATState *out,$/;"	f
lubksb	lubksb.c	/^void lubksb(STORAGE_TYPE **a, int n, int *indx, STORAGE_TYPE b[])$/;"	f
ludcmp	ludcmp.c	/^void ludcmp(STORAGE_TYPE **a, int n, int *indx, STORAGE_TYPE *d)$/;"	f
lvector	nrutil.c	/^unsigned long *lvector(long nl, long nh)$/;"	f
lvector	nrutil.c	/^unsigned long *lvector(nl,nh)$/;"	f
main	tcp.c	/^int main(int argc, char *argv[])$/;"	f
main	test_lob_scaat.c	/^int main(){$/;"	f
mat_add	mat_ops.c	/^int mat_add(STORAGE_TYPE **C, STORAGE_TYPE **A, STORAGE_TYPE **B, int n, $/;"	f
mat_copy	mat_ops.c	/^int mat_copy(STORAGE_TYPE **C, STORAGE_TYPE **A, int n, int A_trans)$/;"	f
mat_mat_mult	mat_ops.c	/^int mat_mat_mult(STORAGE_TYPE **C, STORAGE_TYPE **A, STORAGE_TYPE **B, int n, $/;"	f
mat_vec_mult	mat_ops.c	/^int mat_vec_mult(STORAGE_TYPE *c, STORAGE_TYPE **A, STORAGE_TYPE *b, int n, $/;"	f
matrix	nrutil.c	/^float **matrix(long nrl, long nrh, long ncl, long nch)$/;"	f
matrix	nrutil.c	/^float **matrix(nrl,nrh,ncl,nch)$/;"	f
maxarg1	nrutil.h	/^static float maxarg1,maxarg2;$/;"	v
maxarg2	nrutil.h	/^static float maxarg1,maxarg2;$/;"	v
minarg1	nrutil.h	/^static float minarg1,minarg2;$/;"	v
minarg2	nrutil.h	/^static float minarg1,minarg2;$/;"	v
msg_type	tcp.h	/^   EMSG_TYPE msg_type;$/;"	m
nrerror	nrutil.c	/^void nrerror(char error_text[])$/;"	f
nrerror	nrutil.c	/^void nrerror(error_text)$/;"	f
open_tcp_socket	tcp.c	/^int open_tcp_socket(int *sock_fd,int port )$/;"	f
out	tcp.h	/^	SCAATState out;$/;"	m
outer_prod	mat_ops.c	/^int outer_prod(STORAGE_TYPE **C, STORAGE_TYPE *a, STORAGE_TYPE *b, int n)$/;"	f
pos_x	tcp.h	/^   int8_t pos_x;$/;"	m
pos_y	tcp.h	/^   int8_t pos_y;$/;"	m
range_meas	kalman_data_structures.h	/^	double range_meas;$/;"	m	struct:KalmanBuffer_tag
receiv_time	kalman_data_structures.h	/^	double receiv_time;$/;"	m	struct:KalmanBuffer_tag
request_scaat_prediction	tcp.c	/^int request_scaat_prediction(TARGET_INFO *info)$/;"	f
s	jacobi.c	/^STORAGE_TYPE s,h,tau,g;$/;"	v
s_x	kalman_data_structures.h	/^	double s_x;$/;"	m	struct:KalmanBuffer_tag
s_x	tcp.h	/^	int8_t s_x;$/;"	m
s_x	tcp.h	/^   int8_t s_x;$/;"	m
s_y	kalman_data_structures.h	/^	double s_y;$/;"	m	struct:KalmanBuffer_tag
s_y	tcp.h	/^	int8_t s_y;$/;"	m
s_y	tcp.h	/^   int8_t s_y;$/;"	m
scal_vec_mult	mat_ops.c	/^int	scal_vec_mult(STORAGE_TYPE *c,  STORAGE_TYPE s, STORAGE_TYPE *a, int n)$/;"	f
send_response	tcp.c	/^int send_response(TARGET_INFO *info)$/;"	f
sock_fd	tcp.h	/^int sock_fd ;$/;"	v
sqrarg	nrutil.h	/^static float sqrarg;$/;"	v
submatrix	nrutil.c	/^float **submatrix(a,oldrl,oldrh,oldcl,oldch,newrl,newcl)$/;"	f
submatrix	nrutil.c	/^float **submatrix(float **a, long oldrl, long oldrh, long oldcl, long oldch,$/;"	f
target_arr	tcp.h	/^TARGET_INFO target_arr[MAX_MOBILES];$/;"	v
tau	jacobi.c	/^STORAGE_TYPE s,h,tau,g;$/;"	v
timestamp	kalman_data_structures.h	/^	double timestamp;$/;"	m	struct:KalmanBuffer_tag
to_Id	tcp.h	/^   uint8_t to_Id;$/;"	m
uint8_t	tcp.h	18;"	d
vec_add	mat_ops.c	/^int vec_add(STORAGE_TYPE *c, STORAGE_TYPE *a, STORAGE_TYPE *b, int n)$/;"	f
vector	nrutil.c	/^float *vector(long nl, long nh)$/;"	f
vector	nrutil.c	/^float *vector(nl,nh)$/;"	f
x	kalman_data_structures.h	/^	double *x;$/;"	m	struct:SCAATState_tag
