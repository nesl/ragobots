/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'RfidMsg'
 * message type.
 */

public class RfidMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 9;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 59;

    /** Create a new RfidMsg of size 9. */
    public RfidMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new RfidMsg of the given data_length. */
    public RfidMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RfidMsg with the given data_length
     * and base offset.
     */
    public RfidMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RfidMsg using the given byte array
     * as backing store.
     */
    public RfidMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RfidMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public RfidMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RfidMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public RfidMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RfidMsg embedded in the given message
     * at the given base offset.
     */
    public RfidMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new RfidMsg embedded in the given message
     * at the given base offset and length.
     */
    public RfidMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <RfidMsg> \n";
      try {
        s += "  [ragobotId=0x"+Long.toHexString(get_ragobotId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [x=0x"+Long.toHexString(get_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [y=0x"+Long.toHexString(get_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [value=0x"+Long.toHexString(get_value())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ragobotId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ragobotId' is signed (false).
     */
    public static boolean isSigned_ragobotId() {
        return false;
    }

    /**
     * Return whether the field 'ragobotId' is an array (false).
     */
    public static boolean isArray_ragobotId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ragobotId'
     */
    public static int offset_ragobotId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ragobotId'
     */
    public static int offsetBits_ragobotId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'ragobotId'
     */
    public int get_ragobotId() {
        return (int)getUIntElement(offsetBits_ragobotId(), 16);
    }

    /**
     * Set the value of the field 'ragobotId'
     */
    public void set_ragobotId(int value) {
        setUIntElement(offsetBits_ragobotId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ragobotId'
     */
    public static int size_ragobotId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ragobotId'
     */
    public static int sizeBits_ragobotId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: x
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'x' is signed (false).
     */
    public static boolean isSigned_x() {
        return false;
    }

    /**
     * Return whether the field 'x' is an array (false).
     */
    public static boolean isArray_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'x'
     */
    public static int offset_x() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'x'
     */
    public static int offsetBits_x() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'x'
     */
    public int get_x() {
        return (int)getUIntElement(offsetBits_x(), 16);
    }

    /**
     * Set the value of the field 'x'
     */
    public void set_x(int value) {
        setUIntElement(offsetBits_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'x'
     */
    public static int size_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'x'
     */
    public static int sizeBits_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: y
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'y' is signed (false).
     */
    public static boolean isSigned_y() {
        return false;
    }

    /**
     * Return whether the field 'y' is an array (false).
     */
    public static boolean isArray_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'y'
     */
    public static int offset_y() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'y'
     */
    public static int offsetBits_y() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'y'
     */
    public int get_y() {
        return (int)getUIntElement(offsetBits_y(), 16);
    }

    /**
     * Set the value of the field 'y'
     */
    public void set_y(int value) {
        setUIntElement(offsetBits_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'y'
     */
    public static int size_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'y'
     */
    public static int sizeBits_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: value
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'value' is signed (false).
     */
    public static boolean isSigned_value() {
        return false;
    }

    /**
     * Return whether the field 'value' is an array (false).
     */
    public static boolean isArray_value() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'value'
     */
    public static int offset_value() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'value'
     */
    public static int offsetBits_value() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'value'
     */
    public int get_value() {
        return (int)getUIntElement(offsetBits_value(), 16);
    }

    /**
     * Set the value of the field 'value'
     */
    public void set_value(int value) {
        setUIntElement(offsetBits_value(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'value'
     */
    public static int size_value() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'value'
     */
    public static int sizeBits_value() {
        return 16;
    }

}
